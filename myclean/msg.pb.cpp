// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "msg.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace msg {

namespace {

const ::google::protobuf::Descriptor* IpDetect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IpDetect_reflection_ = NULL;
const ::google::protobuf::Descriptor* IpClean_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IpClean_reflection_ = NULL;
const ::google::protobuf::Descriptor* DetectStats_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DetectStats_reflection_ = NULL;
const ::google::protobuf::Descriptor* CleanStats_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CleanStats_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCStat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCStat_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCStats_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCStats_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActionL4_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActionL4_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActionL7_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActionL7_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActionBlackholeL4_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActionBlackholeL4_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActionBlackholeL7_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActionBlackholeL7_reflection_ = NULL;
const ::google::protobuf::Descriptor* Actions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Actions_reflection_ = NULL;
const ::google::protobuf::Descriptor* IpsReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IpsReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* IpConf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IpConf_reflection_ = NULL;
const ::google::protobuf::Descriptor* IpsResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IpsResp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_msg_2eproto() {
  protobuf_AddDesc_msg_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "msg.proto");
  GOOGLE_CHECK(file != NULL);
  IpDetect_descriptor_ = file->message_type(0);
  static const int IpDetect_offsets_[38] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IpDetect, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IpDetect, inpacks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IpDetect, inbits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IpDetect, outpacks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IpDetect, outbits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IpDetect, fragments_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IpDetect, wlens_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IpDetect, wflags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IpDetect, wsips_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IpDetect, tcpinpacks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IpDetect, tcpoutpacks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IpDetect, tcpinbits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IpDetect, tcpoutbits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IpDetect, tcpinsyns_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IpDetect, tcpoutsyns_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IpDetect, tcpinacks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IpDetect, tcpoutacks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IpDetect, tcpinfins_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IpDetect, tcpoutfins_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IpDetect, tcpinrsts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IpDetect, tcpoutrsts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IpDetect, udpinpacks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IpDetect, udpoutpacks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IpDetect, udpinbits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IpDetect, udpoutbits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IpDetect, icmpinpacks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IpDetect, icmpoutpacks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IpDetect, icmpinbits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IpDetect, icmpoutbits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IpDetect, igmpinpacks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IpDetect, igmpoutpacks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IpDetect, igmpinbits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IpDetect, igmpoutbits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IpDetect, httpreqs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IpDetect, httpconns_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IpDetect, httpgets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IpDetect, httpposts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IpDetect, httpputs_),
  };
  IpDetect_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IpDetect_descriptor_,
      IpDetect::default_instance_,
      IpDetect_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IpDetect, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IpDetect, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IpDetect));
  IpClean_descriptor_ = file->message_type(1);
  static const int IpClean_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IpClean, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IpClean, inpacks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IpClean, inbits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IpClean, frdpacks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IpClean, frdbits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IpClean, droppacks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IpClean, dropbits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IpClean, httpreqs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IpClean, httpconns_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IpClean, blackholebits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IpClean, blackholepacks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IpClean, tcpreplypacks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IpClean, tcpacceptpacks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IpClean, tcpdroppacks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IpClean, tcpforwardpacks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IpClean, l7droppacks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IpClean, l7forwardpacks_),
  };
  IpClean_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IpClean_descriptor_,
      IpClean::default_instance_,
      IpClean_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IpClean, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IpClean, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IpClean));
  DetectStats_descriptor_ = file->message_type(2);
  static const int DetectStats_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectStats, timeseq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectStats, timeunit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectStats, stats_),
  };
  DetectStats_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DetectStats_descriptor_,
      DetectStats::default_instance_,
      DetectStats_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectStats, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectStats, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DetectStats));
  CleanStats_descriptor_ = file->message_type(3);
  static const int CleanStats_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CleanStats, timeseq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CleanStats, timeunit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CleanStats, stats_),
  };
  CleanStats_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CleanStats_descriptor_,
      CleanStats::default_instance_,
      CleanStats_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CleanStats, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CleanStats, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CleanStats));
  CCStat_descriptor_ = file->message_type(4);
  static const int CCStat_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCStat, dstip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCStat, srcip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCStat, httpreqs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCStat, httpconns_),
  };
  CCStat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCStat_descriptor_,
      CCStat::default_instance_,
      CCStat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCStat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCStat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCStat));
  CCStats_descriptor_ = file->message_type(5);
  static const int CCStats_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCStats, timeseq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCStats, timeunit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCStats, stats_),
  };
  CCStats_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCStats_descriptor_,
      CCStats::default_instance_,
      CCStats_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCStats, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCStats, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCStats));
  ActionL4_descriptor_ = file->message_type(6);
  static const int ActionL4_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionL4, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionL4, expire_),
  };
  ActionL4_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActionL4_descriptor_,
      ActionL4::default_instance_,
      ActionL4_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionL4, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionL4, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActionL4));
  ActionL7_descriptor_ = file->message_type(7);
  static const int ActionL7_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionL7, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionL7, expire_),
  };
  ActionL7_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActionL7_descriptor_,
      ActionL7::default_instance_,
      ActionL7_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionL7, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionL7, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActionL7));
  ActionBlackholeL4_descriptor_ = file->message_type(8);
  static const int ActionBlackholeL4_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionBlackholeL4, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionBlackholeL4, expire_),
  };
  ActionBlackholeL4_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActionBlackholeL4_descriptor_,
      ActionBlackholeL4::default_instance_,
      ActionBlackholeL4_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionBlackholeL4, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionBlackholeL4, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActionBlackholeL4));
  ActionBlackholeL7_descriptor_ = file->message_type(9);
  static const int ActionBlackholeL7_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionBlackholeL7, dstip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionBlackholeL7, srcip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionBlackholeL7, expire_),
  };
  ActionBlackholeL7_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActionBlackholeL7_descriptor_,
      ActionBlackholeL7::default_instance_,
      ActionBlackholeL7_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionBlackholeL7, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionBlackholeL7, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActionBlackholeL7));
  Actions_descriptor_ = file->message_type(10);
  static const int Actions_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Actions, actionl4s_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Actions, actionl7s_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Actions, actionbhl4s_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Actions, actionbhl7s_),
  };
  Actions_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Actions_descriptor_,
      Actions::default_instance_,
      Actions_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Actions, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Actions, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Actions));
  IpsReq_descriptor_ = file->message_type(11);
  static const int IpsReq_offsets_[1] = {
  };
  IpsReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IpsReq_descriptor_,
      IpsReq::default_instance_,
      IpsReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IpsReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IpsReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IpsReq));
  IpConf_descriptor_ = file->message_type(12);
  static const int IpConf_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IpConf, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IpConf, l7e_),
  };
  IpConf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IpConf_descriptor_,
      IpConf::default_instance_,
      IpConf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IpConf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IpConf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IpConf));
  IpsResp_descriptor_ = file->message_type(13);
  static const int IpsResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IpsResp, dcc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IpsResp, ips_),
  };
  IpsResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IpsResp_descriptor_,
      IpsResp::default_instance_,
      IpsResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IpsResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IpsResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IpsResp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_msg_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IpDetect_descriptor_, &IpDetect::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IpClean_descriptor_, &IpClean::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DetectStats_descriptor_, &DetectStats::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CleanStats_descriptor_, &CleanStats::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCStat_descriptor_, &CCStat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCStats_descriptor_, &CCStats::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActionL4_descriptor_, &ActionL4::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActionL7_descriptor_, &ActionL7::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActionBlackholeL4_descriptor_, &ActionBlackholeL4::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActionBlackholeL7_descriptor_, &ActionBlackholeL7::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Actions_descriptor_, &Actions::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IpsReq_descriptor_, &IpsReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IpConf_descriptor_, &IpConf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IpsResp_descriptor_, &IpsResp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_msg_2eproto() {
  delete IpDetect::default_instance_;
  delete IpDetect_reflection_;
  delete IpClean::default_instance_;
  delete IpClean_reflection_;
  delete DetectStats::default_instance_;
  delete DetectStats_reflection_;
  delete CleanStats::default_instance_;
  delete CleanStats_reflection_;
  delete CCStat::default_instance_;
  delete CCStat_reflection_;
  delete CCStats::default_instance_;
  delete CCStats_reflection_;
  delete ActionL4::default_instance_;
  delete ActionL4_reflection_;
  delete ActionL7::default_instance_;
  delete ActionL7_reflection_;
  delete ActionBlackholeL4::default_instance_;
  delete ActionBlackholeL4_reflection_;
  delete ActionBlackholeL7::default_instance_;
  delete ActionBlackholeL7_reflection_;
  delete Actions::default_instance_;
  delete Actions_reflection_;
  delete IpsReq::default_instance_;
  delete IpsReq_reflection_;
  delete IpConf::default_instance_;
  delete IpConf_reflection_;
  delete IpsResp::default_instance_;
  delete IpsResp_reflection_;
}

void protobuf_AddDesc_msg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tmsg.proto\022\003msg\"\333\005\n\010IpDetect\022\n\n\002ip\030\001 \002("
    "\r\022\017\n\007inPacks\030\002 \002(\004\022\016\n\006inBits\030\003 \002(\004\022\020\n\010ou"
    "tPacks\030\004 \002(\004\022\017\n\007outBits\030\005 \002(\004\022\021\n\tfragmen"
    "ts\030\006 \002(\004\022\r\n\005wLens\030\007 \002(\004\022\016\n\006wFlags\030\010 \002(\004\022"
    "\r\n\005wSips\030\t \002(\004\022\022\n\ntcpInPacks\030\n \002(\004\022\023\n\013tc"
    "pOutPacks\030\013 \002(\004\022\021\n\ttcpInBits\030\014 \002(\004\022\022\n\ntc"
    "pOutBits\030\r \002(\004\022\021\n\ttcpInSyns\030\016 \002(\004\022\022\n\ntcp"
    "OutSyns\030\017 \002(\004\022\021\n\ttcpInAcks\030\020 \002(\004\022\022\n\ntcpO"
    "utAcks\030\021 \002(\004\022\021\n\ttcpInFins\030\022 \002(\004\022\022\n\ntcpOu"
    "tFins\030\023 \002(\004\022\021\n\ttcpInRsts\030\024 \002(\004\022\022\n\ntcpOut"
    "Rsts\030\025 \002(\004\022\022\n\nudpInPacks\030\026 \002(\004\022\023\n\013udpOut"
    "Packs\030\027 \002(\004\022\021\n\tudpInBits\030\030 \002(\004\022\022\n\nudpOut"
    "Bits\030\031 \002(\004\022\023\n\013icmpInPacks\030\032 \002(\004\022\024\n\014icmpO"
    "utPacks\030\033 \002(\004\022\022\n\nicmpInBits\030\034 \002(\004\022\023\n\013icm"
    "pOutBits\030\035 \002(\004\022\023\n\013igmpInPacks\030\036 \002(\004\022\024\n\014i"
    "gmpOutPacks\030\037 \002(\004\022\022\n\nigmpInBits\030  \002(\004\022\023\n"
    "\013igmpOutBits\030! \002(\004\022\020\n\010httpReqs\030\" \002(\004\022\021\n\t"
    "httpConns\030# \002(\004\022\020\n\010httpGets\030$ \002(\004\022\021\n\thtt"
    "pPosts\030% \002(\004\022\020\n\010httpPuts\030& \002(\004\"\335\002\n\007IpCle"
    "an\022\n\n\002ip\030\001 \002(\r\022\017\n\007inPacks\030\002 \002(\004\022\016\n\006inBit"
    "s\030\003 \002(\004\022\020\n\010frdPacks\030\004 \002(\004\022\017\n\007frdBits\030\005 \002"
    "(\004\022\021\n\tdropPacks\030\006 \002(\004\022\020\n\010dropBits\030\007 \002(\004\022"
    "\020\n\010httpReqs\030\010 \002(\004\022\021\n\thttpConns\030\t \002(\004\022\025\n\r"
    "blackholeBits\030\n \001(\004\022\026\n\016blackholePacks\030\013 "
    "\001(\004\022\025\n\rTcpReplyPacks\030\014 \001(\004\022\026\n\016TcpAcceptP"
    "acks\030\r \001(\004\022\024\n\014TcpDropPacks\030\016 \001(\004\022\027\n\017TcpF"
    "orwardPacks\030\017 \001(\004\022\023\n\013L7DropPacks\030\020 \001(\004\022\026"
    "\n\016L7ForwardPacks\030\021 \001(\004\"N\n\013DetectStats\022\017\n"
    "\007timeSeq\030\001 \002(\004\022\020\n\010timeUnit\030\002 \002(\r\022\034\n\005stat"
    "s\030\003 \003(\0132\r.msg.IpDetect\"L\n\nCleanStats\022\017\n\007"
    "timeSeq\030\001 \002(\004\022\020\n\010timeUnit\030\002 \002(\r\022\033\n\005stats"
    "\030\003 \003(\0132\014.msg.IpClean\"K\n\006CCStat\022\r\n\005dstIp\030"
    "\001 \002(\r\022\r\n\005srcIp\030\002 \002(\r\022\020\n\010httpReqs\030\003 \002(\004\022\021"
    "\n\thttpConns\030\004 \002(\004\"H\n\007CCStats\022\017\n\007timeSeq\030"
    "\001 \002(\004\022\020\n\010timeUnit\030\002 \002(\r\022\032\n\005stats\030\003 \003(\0132\013"
    ".msg.CCStat\"&\n\010ActionL4\022\n\n\002ip\030\001 \002(\r\022\016\n\006e"
    "xpire\030\002 \002(\r\"&\n\010ActionL7\022\n\n\002ip\030\001 \002(\r\022\016\n\006e"
    "xpire\030\002 \002(\r\"/\n\021ActionBlackholeL4\022\n\n\002ip\030\001"
    " \002(\r\022\016\n\006expire\030\002 \002(\r\"A\n\021ActionBlackholeL"
    "7\022\r\n\005dstIp\030\001 \002(\r\022\r\n\005srcIp\030\002 \002(\r\022\016\n\006expir"
    "e\030\003 \002(\r\"\247\001\n\007Actions\022 \n\tactionL4s\030\001 \003(\0132\r"
    ".msg.ActionL4\022 \n\tactionL7s\030\002 \003(\0132\r.msg.A"
    "ctionL7\022+\n\013actionBhL4s\030\003 \003(\0132\026.msg.Actio"
    "nBlackholeL4\022+\n\013actionBhL7s\030\004 \003(\0132\026.msg."
    "ActionBlackholeL7\"\010\n\006IpsReq\"!\n\006IpConf\022\n\n"
    "\002ip\030\001 \002(\r\022\013\n\003l7E\030\002 \002(\010\"0\n\007IpsResp\022\013\n\003dcc"
    "\030\001 \002(\t\022\030\n\003ips\030\002 \003(\0132\013.msg.IpConf", 1872);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "msg.proto", &protobuf_RegisterTypes);
  IpDetect::default_instance_ = new IpDetect();
  IpClean::default_instance_ = new IpClean();
  DetectStats::default_instance_ = new DetectStats();
  CleanStats::default_instance_ = new CleanStats();
  CCStat::default_instance_ = new CCStat();
  CCStats::default_instance_ = new CCStats();
  ActionL4::default_instance_ = new ActionL4();
  ActionL7::default_instance_ = new ActionL7();
  ActionBlackholeL4::default_instance_ = new ActionBlackholeL4();
  ActionBlackholeL7::default_instance_ = new ActionBlackholeL7();
  Actions::default_instance_ = new Actions();
  IpsReq::default_instance_ = new IpsReq();
  IpConf::default_instance_ = new IpConf();
  IpsResp::default_instance_ = new IpsResp();
  IpDetect::default_instance_->InitAsDefaultInstance();
  IpClean::default_instance_->InitAsDefaultInstance();
  DetectStats::default_instance_->InitAsDefaultInstance();
  CleanStats::default_instance_->InitAsDefaultInstance();
  CCStat::default_instance_->InitAsDefaultInstance();
  CCStats::default_instance_->InitAsDefaultInstance();
  ActionL4::default_instance_->InitAsDefaultInstance();
  ActionL7::default_instance_->InitAsDefaultInstance();
  ActionBlackholeL4::default_instance_->InitAsDefaultInstance();
  ActionBlackholeL7::default_instance_->InitAsDefaultInstance();
  Actions::default_instance_->InitAsDefaultInstance();
  IpsReq::default_instance_->InitAsDefaultInstance();
  IpConf::default_instance_->InitAsDefaultInstance();
  IpsResp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_msg_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_msg_2eproto {
  StaticDescriptorInitializer_msg_2eproto() {
    protobuf_AddDesc_msg_2eproto();
  }
} static_descriptor_initializer_msg_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int IpDetect::kIpFieldNumber;
const int IpDetect::kInPacksFieldNumber;
const int IpDetect::kInBitsFieldNumber;
const int IpDetect::kOutPacksFieldNumber;
const int IpDetect::kOutBitsFieldNumber;
const int IpDetect::kFragmentsFieldNumber;
const int IpDetect::kWLensFieldNumber;
const int IpDetect::kWFlagsFieldNumber;
const int IpDetect::kWSipsFieldNumber;
const int IpDetect::kTcpInPacksFieldNumber;
const int IpDetect::kTcpOutPacksFieldNumber;
const int IpDetect::kTcpInBitsFieldNumber;
const int IpDetect::kTcpOutBitsFieldNumber;
const int IpDetect::kTcpInSynsFieldNumber;
const int IpDetect::kTcpOutSynsFieldNumber;
const int IpDetect::kTcpInAcksFieldNumber;
const int IpDetect::kTcpOutAcksFieldNumber;
const int IpDetect::kTcpInFinsFieldNumber;
const int IpDetect::kTcpOutFinsFieldNumber;
const int IpDetect::kTcpInRstsFieldNumber;
const int IpDetect::kTcpOutRstsFieldNumber;
const int IpDetect::kUdpInPacksFieldNumber;
const int IpDetect::kUdpOutPacksFieldNumber;
const int IpDetect::kUdpInBitsFieldNumber;
const int IpDetect::kUdpOutBitsFieldNumber;
const int IpDetect::kIcmpInPacksFieldNumber;
const int IpDetect::kIcmpOutPacksFieldNumber;
const int IpDetect::kIcmpInBitsFieldNumber;
const int IpDetect::kIcmpOutBitsFieldNumber;
const int IpDetect::kIgmpInPacksFieldNumber;
const int IpDetect::kIgmpOutPacksFieldNumber;
const int IpDetect::kIgmpInBitsFieldNumber;
const int IpDetect::kIgmpOutBitsFieldNumber;
const int IpDetect::kHttpReqsFieldNumber;
const int IpDetect::kHttpConnsFieldNumber;
const int IpDetect::kHttpGetsFieldNumber;
const int IpDetect::kHttpPostsFieldNumber;
const int IpDetect::kHttpPutsFieldNumber;
#endif  // !_MSC_VER

IpDetect::IpDetect()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void IpDetect::InitAsDefaultInstance() {
}

IpDetect::IpDetect(const IpDetect& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void IpDetect::SharedCtor() {
  _cached_size_ = 0;
  ip_ = 0u;
  inpacks_ = GOOGLE_ULONGLONG(0);
  inbits_ = GOOGLE_ULONGLONG(0);
  outpacks_ = GOOGLE_ULONGLONG(0);
  outbits_ = GOOGLE_ULONGLONG(0);
  fragments_ = GOOGLE_ULONGLONG(0);
  wlens_ = GOOGLE_ULONGLONG(0);
  wflags_ = GOOGLE_ULONGLONG(0);
  wsips_ = GOOGLE_ULONGLONG(0);
  tcpinpacks_ = GOOGLE_ULONGLONG(0);
  tcpoutpacks_ = GOOGLE_ULONGLONG(0);
  tcpinbits_ = GOOGLE_ULONGLONG(0);
  tcpoutbits_ = GOOGLE_ULONGLONG(0);
  tcpinsyns_ = GOOGLE_ULONGLONG(0);
  tcpoutsyns_ = GOOGLE_ULONGLONG(0);
  tcpinacks_ = GOOGLE_ULONGLONG(0);
  tcpoutacks_ = GOOGLE_ULONGLONG(0);
  tcpinfins_ = GOOGLE_ULONGLONG(0);
  tcpoutfins_ = GOOGLE_ULONGLONG(0);
  tcpinrsts_ = GOOGLE_ULONGLONG(0);
  tcpoutrsts_ = GOOGLE_ULONGLONG(0);
  udpinpacks_ = GOOGLE_ULONGLONG(0);
  udpoutpacks_ = GOOGLE_ULONGLONG(0);
  udpinbits_ = GOOGLE_ULONGLONG(0);
  udpoutbits_ = GOOGLE_ULONGLONG(0);
  icmpinpacks_ = GOOGLE_ULONGLONG(0);
  icmpoutpacks_ = GOOGLE_ULONGLONG(0);
  icmpinbits_ = GOOGLE_ULONGLONG(0);
  icmpoutbits_ = GOOGLE_ULONGLONG(0);
  igmpinpacks_ = GOOGLE_ULONGLONG(0);
  igmpoutpacks_ = GOOGLE_ULONGLONG(0);
  igmpinbits_ = GOOGLE_ULONGLONG(0);
  igmpoutbits_ = GOOGLE_ULONGLONG(0);
  httpreqs_ = GOOGLE_ULONGLONG(0);
  httpconns_ = GOOGLE_ULONGLONG(0);
  httpgets_ = GOOGLE_ULONGLONG(0);
  httpposts_ = GOOGLE_ULONGLONG(0);
  httpputs_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IpDetect::~IpDetect() {
  SharedDtor();
}

void IpDetect::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IpDetect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IpDetect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IpDetect_descriptor_;
}

const IpDetect& IpDetect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

IpDetect* IpDetect::default_instance_ = NULL;

IpDetect* IpDetect::New() const {
  return new IpDetect;
}

void IpDetect::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ip_ = 0u;
    inpacks_ = GOOGLE_ULONGLONG(0);
    inbits_ = GOOGLE_ULONGLONG(0);
    outpacks_ = GOOGLE_ULONGLONG(0);
    outbits_ = GOOGLE_ULONGLONG(0);
    fragments_ = GOOGLE_ULONGLONG(0);
    wlens_ = GOOGLE_ULONGLONG(0);
    wflags_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    wsips_ = GOOGLE_ULONGLONG(0);
    tcpinpacks_ = GOOGLE_ULONGLONG(0);
    tcpoutpacks_ = GOOGLE_ULONGLONG(0);
    tcpinbits_ = GOOGLE_ULONGLONG(0);
    tcpoutbits_ = GOOGLE_ULONGLONG(0);
    tcpinsyns_ = GOOGLE_ULONGLONG(0);
    tcpoutsyns_ = GOOGLE_ULONGLONG(0);
    tcpinacks_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    tcpoutacks_ = GOOGLE_ULONGLONG(0);
    tcpinfins_ = GOOGLE_ULONGLONG(0);
    tcpoutfins_ = GOOGLE_ULONGLONG(0);
    tcpinrsts_ = GOOGLE_ULONGLONG(0);
    tcpoutrsts_ = GOOGLE_ULONGLONG(0);
    udpinpacks_ = GOOGLE_ULONGLONG(0);
    udpoutpacks_ = GOOGLE_ULONGLONG(0);
    udpinbits_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    udpoutbits_ = GOOGLE_ULONGLONG(0);
    icmpinpacks_ = GOOGLE_ULONGLONG(0);
    icmpoutpacks_ = GOOGLE_ULONGLONG(0);
    icmpinbits_ = GOOGLE_ULONGLONG(0);
    icmpoutbits_ = GOOGLE_ULONGLONG(0);
    igmpinpacks_ = GOOGLE_ULONGLONG(0);
    igmpoutpacks_ = GOOGLE_ULONGLONG(0);
    igmpinbits_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    igmpoutbits_ = GOOGLE_ULONGLONG(0);
    httpreqs_ = GOOGLE_ULONGLONG(0);
    httpconns_ = GOOGLE_ULONGLONG(0);
    httpgets_ = GOOGLE_ULONGLONG(0);
    httpposts_ = GOOGLE_ULONGLONG(0);
    httpputs_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IpDetect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ip = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ip_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_inPacks;
        break;
      }
      
      // required uint64 inPacks = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inPacks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &inpacks_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_inBits;
        break;
      }
      
      // required uint64 inBits = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inBits:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &inbits_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_outPacks;
        break;
      }
      
      // required uint64 outPacks = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_outPacks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &outpacks_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_outBits;
        break;
      }
      
      // required uint64 outBits = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_outBits:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &outbits_)));
          _set_bit(4);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_fragments;
        break;
      }
      
      // required uint64 fragments = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fragments:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fragments_)));
          _set_bit(5);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_wLens;
        break;
      }
      
      // required uint64 wLens = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wLens:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &wlens_)));
          _set_bit(6);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_wFlags;
        break;
      }
      
      // required uint64 wFlags = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wFlags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &wflags_)));
          _set_bit(7);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_wSips;
        break;
      }
      
      // required uint64 wSips = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wSips:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &wsips_)));
          _set_bit(8);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_tcpInPacks;
        break;
      }
      
      // required uint64 tcpInPacks = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tcpInPacks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tcpinpacks_)));
          _set_bit(9);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_tcpOutPacks;
        break;
      }
      
      // required uint64 tcpOutPacks = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tcpOutPacks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tcpoutpacks_)));
          _set_bit(10);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_tcpInBits;
        break;
      }
      
      // required uint64 tcpInBits = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tcpInBits:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tcpinbits_)));
          _set_bit(11);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_tcpOutBits;
        break;
      }
      
      // required uint64 tcpOutBits = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tcpOutBits:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tcpoutbits_)));
          _set_bit(12);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_tcpInSyns;
        break;
      }
      
      // required uint64 tcpInSyns = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tcpInSyns:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tcpinsyns_)));
          _set_bit(13);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_tcpOutSyns;
        break;
      }
      
      // required uint64 tcpOutSyns = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tcpOutSyns:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tcpoutsyns_)));
          _set_bit(14);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_tcpInAcks;
        break;
      }
      
      // required uint64 tcpInAcks = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tcpInAcks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tcpinacks_)));
          _set_bit(15);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_tcpOutAcks;
        break;
      }
      
      // required uint64 tcpOutAcks = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tcpOutAcks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tcpoutacks_)));
          _set_bit(16);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_tcpInFins;
        break;
      }
      
      // required uint64 tcpInFins = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tcpInFins:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tcpinfins_)));
          _set_bit(17);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_tcpOutFins;
        break;
      }
      
      // required uint64 tcpOutFins = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tcpOutFins:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tcpoutfins_)));
          _set_bit(18);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_tcpInRsts;
        break;
      }
      
      // required uint64 tcpInRsts = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tcpInRsts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tcpinrsts_)));
          _set_bit(19);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_tcpOutRsts;
        break;
      }
      
      // required uint64 tcpOutRsts = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tcpOutRsts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tcpoutrsts_)));
          _set_bit(20);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_udpInPacks;
        break;
      }
      
      // required uint64 udpInPacks = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_udpInPacks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &udpinpacks_)));
          _set_bit(21);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_udpOutPacks;
        break;
      }
      
      // required uint64 udpOutPacks = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_udpOutPacks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &udpoutpacks_)));
          _set_bit(22);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_udpInBits;
        break;
      }
      
      // required uint64 udpInBits = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_udpInBits:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &udpinbits_)));
          _set_bit(23);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_udpOutBits;
        break;
      }
      
      // required uint64 udpOutBits = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_udpOutBits:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &udpoutbits_)));
          _set_bit(24);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_icmpInPacks;
        break;
      }
      
      // required uint64 icmpInPacks = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_icmpInPacks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &icmpinpacks_)));
          _set_bit(25);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_icmpOutPacks;
        break;
      }
      
      // required uint64 icmpOutPacks = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_icmpOutPacks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &icmpoutpacks_)));
          _set_bit(26);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_icmpInBits;
        break;
      }
      
      // required uint64 icmpInBits = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_icmpInBits:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &icmpinbits_)));
          _set_bit(27);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_icmpOutBits;
        break;
      }
      
      // required uint64 icmpOutBits = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_icmpOutBits:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &icmpoutbits_)));
          _set_bit(28);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_igmpInPacks;
        break;
      }
      
      // required uint64 igmpInPacks = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_igmpInPacks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &igmpinpacks_)));
          _set_bit(29);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_igmpOutPacks;
        break;
      }
      
      // required uint64 igmpOutPacks = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_igmpOutPacks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &igmpoutpacks_)));
          _set_bit(30);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_igmpInBits;
        break;
      }
      
      // required uint64 igmpInBits = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_igmpInBits:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &igmpinbits_)));
          _set_bit(31);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(264)) goto parse_igmpOutBits;
        break;
      }
      
      // required uint64 igmpOutBits = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_igmpOutBits:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &igmpoutbits_)));
          _set_bit(32);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(272)) goto parse_httpReqs;
        break;
      }
      
      // required uint64 httpReqs = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_httpReqs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &httpreqs_)));
          _set_bit(33);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(280)) goto parse_httpConns;
        break;
      }
      
      // required uint64 httpConns = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_httpConns:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &httpconns_)));
          _set_bit(34);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(288)) goto parse_httpGets;
        break;
      }
      
      // required uint64 httpGets = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_httpGets:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &httpgets_)));
          _set_bit(35);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(296)) goto parse_httpPosts;
        break;
      }
      
      // required uint64 httpPosts = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_httpPosts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &httpposts_)));
          _set_bit(36);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(304)) goto parse_httpPuts;
        break;
      }
      
      // required uint64 httpPuts = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_httpPuts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &httpputs_)));
          _set_bit(37);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void IpDetect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 ip = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ip(), output);
  }
  
  // required uint64 inPacks = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->inpacks(), output);
  }
  
  // required uint64 inBits = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->inbits(), output);
  }
  
  // required uint64 outPacks = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->outpacks(), output);
  }
  
  // required uint64 outBits = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->outbits(), output);
  }
  
  // required uint64 fragments = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->fragments(), output);
  }
  
  // required uint64 wLens = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->wlens(), output);
  }
  
  // required uint64 wFlags = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->wflags(), output);
  }
  
  // required uint64 wSips = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->wsips(), output);
  }
  
  // required uint64 tcpInPacks = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->tcpinpacks(), output);
  }
  
  // required uint64 tcpOutPacks = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->tcpoutpacks(), output);
  }
  
  // required uint64 tcpInBits = 12;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->tcpinbits(), output);
  }
  
  // required uint64 tcpOutBits = 13;
  if (_has_bit(12)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(13, this->tcpoutbits(), output);
  }
  
  // required uint64 tcpInSyns = 14;
  if (_has_bit(13)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(14, this->tcpinsyns(), output);
  }
  
  // required uint64 tcpOutSyns = 15;
  if (_has_bit(14)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(15, this->tcpoutsyns(), output);
  }
  
  // required uint64 tcpInAcks = 16;
  if (_has_bit(15)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(16, this->tcpinacks(), output);
  }
  
  // required uint64 tcpOutAcks = 17;
  if (_has_bit(16)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(17, this->tcpoutacks(), output);
  }
  
  // required uint64 tcpInFins = 18;
  if (_has_bit(17)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(18, this->tcpinfins(), output);
  }
  
  // required uint64 tcpOutFins = 19;
  if (_has_bit(18)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(19, this->tcpoutfins(), output);
  }
  
  // required uint64 tcpInRsts = 20;
  if (_has_bit(19)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(20, this->tcpinrsts(), output);
  }
  
  // required uint64 tcpOutRsts = 21;
  if (_has_bit(20)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(21, this->tcpoutrsts(), output);
  }
  
  // required uint64 udpInPacks = 22;
  if (_has_bit(21)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(22, this->udpinpacks(), output);
  }
  
  // required uint64 udpOutPacks = 23;
  if (_has_bit(22)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(23, this->udpoutpacks(), output);
  }
  
  // required uint64 udpInBits = 24;
  if (_has_bit(23)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(24, this->udpinbits(), output);
  }
  
  // required uint64 udpOutBits = 25;
  if (_has_bit(24)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(25, this->udpoutbits(), output);
  }
  
  // required uint64 icmpInPacks = 26;
  if (_has_bit(25)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(26, this->icmpinpacks(), output);
  }
  
  // required uint64 icmpOutPacks = 27;
  if (_has_bit(26)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(27, this->icmpoutpacks(), output);
  }
  
  // required uint64 icmpInBits = 28;
  if (_has_bit(27)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(28, this->icmpinbits(), output);
  }
  
  // required uint64 icmpOutBits = 29;
  if (_has_bit(28)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(29, this->icmpoutbits(), output);
  }
  
  // required uint64 igmpInPacks = 30;
  if (_has_bit(29)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(30, this->igmpinpacks(), output);
  }
  
  // required uint64 igmpOutPacks = 31;
  if (_has_bit(30)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(31, this->igmpoutpacks(), output);
  }
  
  // required uint64 igmpInBits = 32;
  if (_has_bit(31)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(32, this->igmpinbits(), output);
  }
  
  // required uint64 igmpOutBits = 33;
  if (_has_bit(32)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(33, this->igmpoutbits(), output);
  }
  
  // required uint64 httpReqs = 34;
  if (_has_bit(33)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(34, this->httpreqs(), output);
  }
  
  // required uint64 httpConns = 35;
  if (_has_bit(34)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(35, this->httpconns(), output);
  }
  
  // required uint64 httpGets = 36;
  if (_has_bit(35)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(36, this->httpgets(), output);
  }
  
  // required uint64 httpPosts = 37;
  if (_has_bit(36)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(37, this->httpposts(), output);
  }
  
  // required uint64 httpPuts = 38;
  if (_has_bit(37)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(38, this->httpputs(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* IpDetect::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 ip = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ip(), target);
  }
  
  // required uint64 inPacks = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->inpacks(), target);
  }
  
  // required uint64 inBits = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->inbits(), target);
  }
  
  // required uint64 outPacks = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->outpacks(), target);
  }
  
  // required uint64 outBits = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->outbits(), target);
  }
  
  // required uint64 fragments = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->fragments(), target);
  }
  
  // required uint64 wLens = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->wlens(), target);
  }
  
  // required uint64 wFlags = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->wflags(), target);
  }
  
  // required uint64 wSips = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->wsips(), target);
  }
  
  // required uint64 tcpInPacks = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->tcpinpacks(), target);
  }
  
  // required uint64 tcpOutPacks = 11;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->tcpoutpacks(), target);
  }
  
  // required uint64 tcpInBits = 12;
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->tcpinbits(), target);
  }
  
  // required uint64 tcpOutBits = 13;
  if (_has_bit(12)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(13, this->tcpoutbits(), target);
  }
  
  // required uint64 tcpInSyns = 14;
  if (_has_bit(13)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(14, this->tcpinsyns(), target);
  }
  
  // required uint64 tcpOutSyns = 15;
  if (_has_bit(14)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(15, this->tcpoutsyns(), target);
  }
  
  // required uint64 tcpInAcks = 16;
  if (_has_bit(15)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(16, this->tcpinacks(), target);
  }
  
  // required uint64 tcpOutAcks = 17;
  if (_has_bit(16)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(17, this->tcpoutacks(), target);
  }
  
  // required uint64 tcpInFins = 18;
  if (_has_bit(17)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(18, this->tcpinfins(), target);
  }
  
  // required uint64 tcpOutFins = 19;
  if (_has_bit(18)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(19, this->tcpoutfins(), target);
  }
  
  // required uint64 tcpInRsts = 20;
  if (_has_bit(19)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(20, this->tcpinrsts(), target);
  }
  
  // required uint64 tcpOutRsts = 21;
  if (_has_bit(20)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(21, this->tcpoutrsts(), target);
  }
  
  // required uint64 udpInPacks = 22;
  if (_has_bit(21)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(22, this->udpinpacks(), target);
  }
  
  // required uint64 udpOutPacks = 23;
  if (_has_bit(22)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(23, this->udpoutpacks(), target);
  }
  
  // required uint64 udpInBits = 24;
  if (_has_bit(23)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(24, this->udpinbits(), target);
  }
  
  // required uint64 udpOutBits = 25;
  if (_has_bit(24)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(25, this->udpoutbits(), target);
  }
  
  // required uint64 icmpInPacks = 26;
  if (_has_bit(25)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(26, this->icmpinpacks(), target);
  }
  
  // required uint64 icmpOutPacks = 27;
  if (_has_bit(26)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(27, this->icmpoutpacks(), target);
  }
  
  // required uint64 icmpInBits = 28;
  if (_has_bit(27)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(28, this->icmpinbits(), target);
  }
  
  // required uint64 icmpOutBits = 29;
  if (_has_bit(28)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(29, this->icmpoutbits(), target);
  }
  
  // required uint64 igmpInPacks = 30;
  if (_has_bit(29)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(30, this->igmpinpacks(), target);
  }
  
  // required uint64 igmpOutPacks = 31;
  if (_has_bit(30)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(31, this->igmpoutpacks(), target);
  }
  
  // required uint64 igmpInBits = 32;
  if (_has_bit(31)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(32, this->igmpinbits(), target);
  }
  
  // required uint64 igmpOutBits = 33;
  if (_has_bit(32)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(33, this->igmpoutbits(), target);
  }
  
  // required uint64 httpReqs = 34;
  if (_has_bit(33)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(34, this->httpreqs(), target);
  }
  
  // required uint64 httpConns = 35;
  if (_has_bit(34)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(35, this->httpconns(), target);
  }
  
  // required uint64 httpGets = 36;
  if (_has_bit(35)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(36, this->httpgets(), target);
  }
  
  // required uint64 httpPosts = 37;
  if (_has_bit(36)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(37, this->httpposts(), target);
  }
  
  // required uint64 httpPuts = 38;
  if (_has_bit(37)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(38, this->httpputs(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int IpDetect::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ip = 1;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ip());
    }
    
    // required uint64 inPacks = 2;
    if (has_inpacks()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->inpacks());
    }
    
    // required uint64 inBits = 3;
    if (has_inbits()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->inbits());
    }
    
    // required uint64 outPacks = 4;
    if (has_outpacks()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->outpacks());
    }
    
    // required uint64 outBits = 5;
    if (has_outbits()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->outbits());
    }
    
    // required uint64 fragments = 6;
    if (has_fragments()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fragments());
    }
    
    // required uint64 wLens = 7;
    if (has_wlens()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->wlens());
    }
    
    // required uint64 wFlags = 8;
    if (has_wflags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->wflags());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint64 wSips = 9;
    if (has_wsips()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->wsips());
    }
    
    // required uint64 tcpInPacks = 10;
    if (has_tcpinpacks()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->tcpinpacks());
    }
    
    // required uint64 tcpOutPacks = 11;
    if (has_tcpoutpacks()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->tcpoutpacks());
    }
    
    // required uint64 tcpInBits = 12;
    if (has_tcpinbits()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->tcpinbits());
    }
    
    // required uint64 tcpOutBits = 13;
    if (has_tcpoutbits()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->tcpoutbits());
    }
    
    // required uint64 tcpInSyns = 14;
    if (has_tcpinsyns()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->tcpinsyns());
    }
    
    // required uint64 tcpOutSyns = 15;
    if (has_tcpoutsyns()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->tcpoutsyns());
    }
    
    // required uint64 tcpInAcks = 16;
    if (has_tcpinacks()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->tcpinacks());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required uint64 tcpOutAcks = 17;
    if (has_tcpoutacks()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->tcpoutacks());
    }
    
    // required uint64 tcpInFins = 18;
    if (has_tcpinfins()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->tcpinfins());
    }
    
    // required uint64 tcpOutFins = 19;
    if (has_tcpoutfins()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->tcpoutfins());
    }
    
    // required uint64 tcpInRsts = 20;
    if (has_tcpinrsts()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->tcpinrsts());
    }
    
    // required uint64 tcpOutRsts = 21;
    if (has_tcpoutrsts()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->tcpoutrsts());
    }
    
    // required uint64 udpInPacks = 22;
    if (has_udpinpacks()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->udpinpacks());
    }
    
    // required uint64 udpOutPacks = 23;
    if (has_udpoutpacks()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->udpoutpacks());
    }
    
    // required uint64 udpInBits = 24;
    if (has_udpinbits()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->udpinbits());
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // required uint64 udpOutBits = 25;
    if (has_udpoutbits()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->udpoutbits());
    }
    
    // required uint64 icmpInPacks = 26;
    if (has_icmpinpacks()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->icmpinpacks());
    }
    
    // required uint64 icmpOutPacks = 27;
    if (has_icmpoutpacks()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->icmpoutpacks());
    }
    
    // required uint64 icmpInBits = 28;
    if (has_icmpinbits()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->icmpinbits());
    }
    
    // required uint64 icmpOutBits = 29;
    if (has_icmpoutbits()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->icmpoutbits());
    }
    
    // required uint64 igmpInPacks = 30;
    if (has_igmpinpacks()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->igmpinpacks());
    }
    
    // required uint64 igmpOutPacks = 31;
    if (has_igmpoutpacks()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->igmpoutpacks());
    }
    
    // required uint64 igmpInBits = 32;
    if (has_igmpinbits()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->igmpinbits());
    }
    
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // required uint64 igmpOutBits = 33;
    if (has_igmpoutbits()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->igmpoutbits());
    }
    
    // required uint64 httpReqs = 34;
    if (has_httpreqs()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->httpreqs());
    }
    
    // required uint64 httpConns = 35;
    if (has_httpconns()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->httpconns());
    }
    
    // required uint64 httpGets = 36;
    if (has_httpgets()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->httpgets());
    }
    
    // required uint64 httpPosts = 37;
    if (has_httpposts()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->httpposts());
    }
    
    // required uint64 httpPuts = 38;
    if (has_httpputs()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->httpputs());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IpDetect::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IpDetect* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IpDetect*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IpDetect::MergeFrom(const IpDetect& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_ip(from.ip());
    }
    if (from._has_bit(1)) {
      set_inpacks(from.inpacks());
    }
    if (from._has_bit(2)) {
      set_inbits(from.inbits());
    }
    if (from._has_bit(3)) {
      set_outpacks(from.outpacks());
    }
    if (from._has_bit(4)) {
      set_outbits(from.outbits());
    }
    if (from._has_bit(5)) {
      set_fragments(from.fragments());
    }
    if (from._has_bit(6)) {
      set_wlens(from.wlens());
    }
    if (from._has_bit(7)) {
      set_wflags(from.wflags());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_wsips(from.wsips());
    }
    if (from._has_bit(9)) {
      set_tcpinpacks(from.tcpinpacks());
    }
    if (from._has_bit(10)) {
      set_tcpoutpacks(from.tcpoutpacks());
    }
    if (from._has_bit(11)) {
      set_tcpinbits(from.tcpinbits());
    }
    if (from._has_bit(12)) {
      set_tcpoutbits(from.tcpoutbits());
    }
    if (from._has_bit(13)) {
      set_tcpinsyns(from.tcpinsyns());
    }
    if (from._has_bit(14)) {
      set_tcpoutsyns(from.tcpoutsyns());
    }
    if (from._has_bit(15)) {
      set_tcpinacks(from.tcpinacks());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from._has_bit(16)) {
      set_tcpoutacks(from.tcpoutacks());
    }
    if (from._has_bit(17)) {
      set_tcpinfins(from.tcpinfins());
    }
    if (from._has_bit(18)) {
      set_tcpoutfins(from.tcpoutfins());
    }
    if (from._has_bit(19)) {
      set_tcpinrsts(from.tcpinrsts());
    }
    if (from._has_bit(20)) {
      set_tcpoutrsts(from.tcpoutrsts());
    }
    if (from._has_bit(21)) {
      set_udpinpacks(from.udpinpacks());
    }
    if (from._has_bit(22)) {
      set_udpoutpacks(from.udpoutpacks());
    }
    if (from._has_bit(23)) {
      set_udpinbits(from.udpinbits());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from._has_bit(24)) {
      set_udpoutbits(from.udpoutbits());
    }
    if (from._has_bit(25)) {
      set_icmpinpacks(from.icmpinpacks());
    }
    if (from._has_bit(26)) {
      set_icmpoutpacks(from.icmpoutpacks());
    }
    if (from._has_bit(27)) {
      set_icmpinbits(from.icmpinbits());
    }
    if (from._has_bit(28)) {
      set_icmpoutbits(from.icmpoutbits());
    }
    if (from._has_bit(29)) {
      set_igmpinpacks(from.igmpinpacks());
    }
    if (from._has_bit(30)) {
      set_igmpoutpacks(from.igmpoutpacks());
    }
    if (from._has_bit(31)) {
      set_igmpinbits(from.igmpinbits());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from._has_bit(32)) {
      set_igmpoutbits(from.igmpoutbits());
    }
    if (from._has_bit(33)) {
      set_httpreqs(from.httpreqs());
    }
    if (from._has_bit(34)) {
      set_httpconns(from.httpconns());
    }
    if (from._has_bit(35)) {
      set_httpgets(from.httpgets());
    }
    if (from._has_bit(36)) {
      set_httpposts(from.httpposts());
    }
    if (from._has_bit(37)) {
      set_httpputs(from.httpputs());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IpDetect::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IpDetect::CopyFrom(const IpDetect& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IpDetect::IsInitialized() const {
  if ((_has_bits_[0] & 0xffffffff) != 0xffffffff) return false;
  if ((_has_bits_[1] & 0x0000003f) != 0x0000003f) return false;
  
  return true;
}

void IpDetect::Swap(IpDetect* other) {
  if (other != this) {
    std::swap(ip_, other->ip_);
    std::swap(inpacks_, other->inpacks_);
    std::swap(inbits_, other->inbits_);
    std::swap(outpacks_, other->outpacks_);
    std::swap(outbits_, other->outbits_);
    std::swap(fragments_, other->fragments_);
    std::swap(wlens_, other->wlens_);
    std::swap(wflags_, other->wflags_);
    std::swap(wsips_, other->wsips_);
    std::swap(tcpinpacks_, other->tcpinpacks_);
    std::swap(tcpoutpacks_, other->tcpoutpacks_);
    std::swap(tcpinbits_, other->tcpinbits_);
    std::swap(tcpoutbits_, other->tcpoutbits_);
    std::swap(tcpinsyns_, other->tcpinsyns_);
    std::swap(tcpoutsyns_, other->tcpoutsyns_);
    std::swap(tcpinacks_, other->tcpinacks_);
    std::swap(tcpoutacks_, other->tcpoutacks_);
    std::swap(tcpinfins_, other->tcpinfins_);
    std::swap(tcpoutfins_, other->tcpoutfins_);
    std::swap(tcpinrsts_, other->tcpinrsts_);
    std::swap(tcpoutrsts_, other->tcpoutrsts_);
    std::swap(udpinpacks_, other->udpinpacks_);
    std::swap(udpoutpacks_, other->udpoutpacks_);
    std::swap(udpinbits_, other->udpinbits_);
    std::swap(udpoutbits_, other->udpoutbits_);
    std::swap(icmpinpacks_, other->icmpinpacks_);
    std::swap(icmpoutpacks_, other->icmpoutpacks_);
    std::swap(icmpinbits_, other->icmpinbits_);
    std::swap(icmpoutbits_, other->icmpoutbits_);
    std::swap(igmpinpacks_, other->igmpinpacks_);
    std::swap(igmpoutpacks_, other->igmpoutpacks_);
    std::swap(igmpinbits_, other->igmpinbits_);
    std::swap(igmpoutbits_, other->igmpoutbits_);
    std::swap(httpreqs_, other->httpreqs_);
    std::swap(httpconns_, other->httpconns_);
    std::swap(httpgets_, other->httpgets_);
    std::swap(httpposts_, other->httpposts_);
    std::swap(httpputs_, other->httpputs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IpDetect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IpDetect_descriptor_;
  metadata.reflection = IpDetect_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IpClean::kIpFieldNumber;
const int IpClean::kInPacksFieldNumber;
const int IpClean::kInBitsFieldNumber;
const int IpClean::kFrdPacksFieldNumber;
const int IpClean::kFrdBitsFieldNumber;
const int IpClean::kDropPacksFieldNumber;
const int IpClean::kDropBitsFieldNumber;
const int IpClean::kHttpReqsFieldNumber;
const int IpClean::kHttpConnsFieldNumber;
const int IpClean::kBlackholeBitsFieldNumber;
const int IpClean::kBlackholePacksFieldNumber;
const int IpClean::kTcpReplyPacksFieldNumber;
const int IpClean::kTcpAcceptPacksFieldNumber;
const int IpClean::kTcpDropPacksFieldNumber;
const int IpClean::kTcpForwardPacksFieldNumber;
const int IpClean::kL7DropPacksFieldNumber;
const int IpClean::kL7ForwardPacksFieldNumber;
#endif  // !_MSC_VER

IpClean::IpClean()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void IpClean::InitAsDefaultInstance() {
}

IpClean::IpClean(const IpClean& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void IpClean::SharedCtor() {
  _cached_size_ = 0;
  ip_ = 0u;
  inpacks_ = GOOGLE_ULONGLONG(0);
  inbits_ = GOOGLE_ULONGLONG(0);
  frdpacks_ = GOOGLE_ULONGLONG(0);
  frdbits_ = GOOGLE_ULONGLONG(0);
  droppacks_ = GOOGLE_ULONGLONG(0);
  dropbits_ = GOOGLE_ULONGLONG(0);
  httpreqs_ = GOOGLE_ULONGLONG(0);
  httpconns_ = GOOGLE_ULONGLONG(0);
  blackholebits_ = GOOGLE_ULONGLONG(0);
  blackholepacks_ = GOOGLE_ULONGLONG(0);
  tcpreplypacks_ = GOOGLE_ULONGLONG(0);
  tcpacceptpacks_ = GOOGLE_ULONGLONG(0);
  tcpdroppacks_ = GOOGLE_ULONGLONG(0);
  tcpforwardpacks_ = GOOGLE_ULONGLONG(0);
  l7droppacks_ = GOOGLE_ULONGLONG(0);
  l7forwardpacks_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IpClean::~IpClean() {
  SharedDtor();
}

void IpClean::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IpClean::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IpClean::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IpClean_descriptor_;
}

const IpClean& IpClean::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

IpClean* IpClean::default_instance_ = NULL;

IpClean* IpClean::New() const {
  return new IpClean;
}

void IpClean::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ip_ = 0u;
    inpacks_ = GOOGLE_ULONGLONG(0);
    inbits_ = GOOGLE_ULONGLONG(0);
    frdpacks_ = GOOGLE_ULONGLONG(0);
    frdbits_ = GOOGLE_ULONGLONG(0);
    droppacks_ = GOOGLE_ULONGLONG(0);
    dropbits_ = GOOGLE_ULONGLONG(0);
    httpreqs_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    httpconns_ = GOOGLE_ULONGLONG(0);
    blackholebits_ = GOOGLE_ULONGLONG(0);
    blackholepacks_ = GOOGLE_ULONGLONG(0);
    tcpreplypacks_ = GOOGLE_ULONGLONG(0);
    tcpacceptpacks_ = GOOGLE_ULONGLONG(0);
    tcpdroppacks_ = GOOGLE_ULONGLONG(0);
    tcpforwardpacks_ = GOOGLE_ULONGLONG(0);
    l7droppacks_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    l7forwardpacks_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IpClean::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ip = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ip_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_inPacks;
        break;
      }
      
      // required uint64 inPacks = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inPacks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &inpacks_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_inBits;
        break;
      }
      
      // required uint64 inBits = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inBits:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &inbits_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_frdPacks;
        break;
      }
      
      // required uint64 frdPacks = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_frdPacks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &frdpacks_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_frdBits;
        break;
      }
      
      // required uint64 frdBits = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_frdBits:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &frdbits_)));
          _set_bit(4);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_dropPacks;
        break;
      }
      
      // required uint64 dropPacks = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dropPacks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &droppacks_)));
          _set_bit(5);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_dropBits;
        break;
      }
      
      // required uint64 dropBits = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dropBits:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dropbits_)));
          _set_bit(6);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_httpReqs;
        break;
      }
      
      // required uint64 httpReqs = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_httpReqs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &httpreqs_)));
          _set_bit(7);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_httpConns;
        break;
      }
      
      // required uint64 httpConns = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_httpConns:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &httpconns_)));
          _set_bit(8);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_blackholeBits;
        break;
      }
      
      // optional uint64 blackholeBits = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_blackholeBits:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &blackholebits_)));
          _set_bit(9);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_blackholePacks;
        break;
      }
      
      // optional uint64 blackholePacks = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_blackholePacks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &blackholepacks_)));
          _set_bit(10);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_TcpReplyPacks;
        break;
      }
      
      // optional uint64 TcpReplyPacks = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TcpReplyPacks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tcpreplypacks_)));
          _set_bit(11);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_TcpAcceptPacks;
        break;
      }
      
      // optional uint64 TcpAcceptPacks = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TcpAcceptPacks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tcpacceptpacks_)));
          _set_bit(12);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_TcpDropPacks;
        break;
      }
      
      // optional uint64 TcpDropPacks = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TcpDropPacks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tcpdroppacks_)));
          _set_bit(13);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_TcpForwardPacks;
        break;
      }
      
      // optional uint64 TcpForwardPacks = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TcpForwardPacks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tcpforwardpacks_)));
          _set_bit(14);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_L7DropPacks;
        break;
      }
      
      // optional uint64 L7DropPacks = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_L7DropPacks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &l7droppacks_)));
          _set_bit(15);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_L7ForwardPacks;
        break;
      }
      
      // optional uint64 L7ForwardPacks = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_L7ForwardPacks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &l7forwardpacks_)));
          _set_bit(16);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void IpClean::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 ip = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ip(), output);
  }
  
  // required uint64 inPacks = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->inpacks(), output);
  }
  
  // required uint64 inBits = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->inbits(), output);
  }
  
  // required uint64 frdPacks = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->frdpacks(), output);
  }
  
  // required uint64 frdBits = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->frdbits(), output);
  }
  
  // required uint64 dropPacks = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->droppacks(), output);
  }
  
  // required uint64 dropBits = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->dropbits(), output);
  }
  
  // required uint64 httpReqs = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->httpreqs(), output);
  }
  
  // required uint64 httpConns = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->httpconns(), output);
  }
  
  // optional uint64 blackholeBits = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->blackholebits(), output);
  }
  
  // optional uint64 blackholePacks = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->blackholepacks(), output);
  }
  
  // optional uint64 TcpReplyPacks = 12;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->tcpreplypacks(), output);
  }
  
  // optional uint64 TcpAcceptPacks = 13;
  if (_has_bit(12)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(13, this->tcpacceptpacks(), output);
  }
  
  // optional uint64 TcpDropPacks = 14;
  if (_has_bit(13)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(14, this->tcpdroppacks(), output);
  }
  
  // optional uint64 TcpForwardPacks = 15;
  if (_has_bit(14)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(15, this->tcpforwardpacks(), output);
  }
  
  // optional uint64 L7DropPacks = 16;
  if (_has_bit(15)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(16, this->l7droppacks(), output);
  }
  
  // optional uint64 L7ForwardPacks = 17;
  if (_has_bit(16)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(17, this->l7forwardpacks(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* IpClean::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 ip = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ip(), target);
  }
  
  // required uint64 inPacks = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->inpacks(), target);
  }
  
  // required uint64 inBits = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->inbits(), target);
  }
  
  // required uint64 frdPacks = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->frdpacks(), target);
  }
  
  // required uint64 frdBits = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->frdbits(), target);
  }
  
  // required uint64 dropPacks = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->droppacks(), target);
  }
  
  // required uint64 dropBits = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->dropbits(), target);
  }
  
  // required uint64 httpReqs = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->httpreqs(), target);
  }
  
  // required uint64 httpConns = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->httpconns(), target);
  }
  
  // optional uint64 blackholeBits = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->blackholebits(), target);
  }
  
  // optional uint64 blackholePacks = 11;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->blackholepacks(), target);
  }
  
  // optional uint64 TcpReplyPacks = 12;
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->tcpreplypacks(), target);
  }
  
  // optional uint64 TcpAcceptPacks = 13;
  if (_has_bit(12)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(13, this->tcpacceptpacks(), target);
  }
  
  // optional uint64 TcpDropPacks = 14;
  if (_has_bit(13)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(14, this->tcpdroppacks(), target);
  }
  
  // optional uint64 TcpForwardPacks = 15;
  if (_has_bit(14)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(15, this->tcpforwardpacks(), target);
  }
  
  // optional uint64 L7DropPacks = 16;
  if (_has_bit(15)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(16, this->l7droppacks(), target);
  }
  
  // optional uint64 L7ForwardPacks = 17;
  if (_has_bit(16)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(17, this->l7forwardpacks(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int IpClean::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ip = 1;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ip());
    }
    
    // required uint64 inPacks = 2;
    if (has_inpacks()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->inpacks());
    }
    
    // required uint64 inBits = 3;
    if (has_inbits()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->inbits());
    }
    
    // required uint64 frdPacks = 4;
    if (has_frdpacks()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->frdpacks());
    }
    
    // required uint64 frdBits = 5;
    if (has_frdbits()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->frdbits());
    }
    
    // required uint64 dropPacks = 6;
    if (has_droppacks()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->droppacks());
    }
    
    // required uint64 dropBits = 7;
    if (has_dropbits()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dropbits());
    }
    
    // required uint64 httpReqs = 8;
    if (has_httpreqs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->httpreqs());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint64 httpConns = 9;
    if (has_httpconns()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->httpconns());
    }
    
    // optional uint64 blackholeBits = 10;
    if (has_blackholebits()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->blackholebits());
    }
    
    // optional uint64 blackholePacks = 11;
    if (has_blackholepacks()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->blackholepacks());
    }
    
    // optional uint64 TcpReplyPacks = 12;
    if (has_tcpreplypacks()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->tcpreplypacks());
    }
    
    // optional uint64 TcpAcceptPacks = 13;
    if (has_tcpacceptpacks()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->tcpacceptpacks());
    }
    
    // optional uint64 TcpDropPacks = 14;
    if (has_tcpdroppacks()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->tcpdroppacks());
    }
    
    // optional uint64 TcpForwardPacks = 15;
    if (has_tcpforwardpacks()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->tcpforwardpacks());
    }
    
    // optional uint64 L7DropPacks = 16;
    if (has_l7droppacks()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->l7droppacks());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint64 L7ForwardPacks = 17;
    if (has_l7forwardpacks()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->l7forwardpacks());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IpClean::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IpClean* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IpClean*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IpClean::MergeFrom(const IpClean& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_ip(from.ip());
    }
    if (from._has_bit(1)) {
      set_inpacks(from.inpacks());
    }
    if (from._has_bit(2)) {
      set_inbits(from.inbits());
    }
    if (from._has_bit(3)) {
      set_frdpacks(from.frdpacks());
    }
    if (from._has_bit(4)) {
      set_frdbits(from.frdbits());
    }
    if (from._has_bit(5)) {
      set_droppacks(from.droppacks());
    }
    if (from._has_bit(6)) {
      set_dropbits(from.dropbits());
    }
    if (from._has_bit(7)) {
      set_httpreqs(from.httpreqs());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_httpconns(from.httpconns());
    }
    if (from._has_bit(9)) {
      set_blackholebits(from.blackholebits());
    }
    if (from._has_bit(10)) {
      set_blackholepacks(from.blackholepacks());
    }
    if (from._has_bit(11)) {
      set_tcpreplypacks(from.tcpreplypacks());
    }
    if (from._has_bit(12)) {
      set_tcpacceptpacks(from.tcpacceptpacks());
    }
    if (from._has_bit(13)) {
      set_tcpdroppacks(from.tcpdroppacks());
    }
    if (from._has_bit(14)) {
      set_tcpforwardpacks(from.tcpforwardpacks());
    }
    if (from._has_bit(15)) {
      set_l7droppacks(from.l7droppacks());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from._has_bit(16)) {
      set_l7forwardpacks(from.l7forwardpacks());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IpClean::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IpClean::CopyFrom(const IpClean& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IpClean::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;
  
  return true;
}

void IpClean::Swap(IpClean* other) {
  if (other != this) {
    std::swap(ip_, other->ip_);
    std::swap(inpacks_, other->inpacks_);
    std::swap(inbits_, other->inbits_);
    std::swap(frdpacks_, other->frdpacks_);
    std::swap(frdbits_, other->frdbits_);
    std::swap(droppacks_, other->droppacks_);
    std::swap(dropbits_, other->dropbits_);
    std::swap(httpreqs_, other->httpreqs_);
    std::swap(httpconns_, other->httpconns_);
    std::swap(blackholebits_, other->blackholebits_);
    std::swap(blackholepacks_, other->blackholepacks_);
    std::swap(tcpreplypacks_, other->tcpreplypacks_);
    std::swap(tcpacceptpacks_, other->tcpacceptpacks_);
    std::swap(tcpdroppacks_, other->tcpdroppacks_);
    std::swap(tcpforwardpacks_, other->tcpforwardpacks_);
    std::swap(l7droppacks_, other->l7droppacks_);
    std::swap(l7forwardpacks_, other->l7forwardpacks_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IpClean::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IpClean_descriptor_;
  metadata.reflection = IpClean_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DetectStats::kTimeSeqFieldNumber;
const int DetectStats::kTimeUnitFieldNumber;
const int DetectStats::kStatsFieldNumber;
#endif  // !_MSC_VER

DetectStats::DetectStats()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DetectStats::InitAsDefaultInstance() {
}

DetectStats::DetectStats(const DetectStats& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DetectStats::SharedCtor() {
  _cached_size_ = 0;
  timeseq_ = GOOGLE_ULONGLONG(0);
  timeunit_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DetectStats::~DetectStats() {
  SharedDtor();
}

void DetectStats::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DetectStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DetectStats::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DetectStats_descriptor_;
}

const DetectStats& DetectStats::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

DetectStats* DetectStats::default_instance_ = NULL;

DetectStats* DetectStats::New() const {
  return new DetectStats;
}

void DetectStats::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    timeseq_ = GOOGLE_ULONGLONG(0);
    timeunit_ = 0u;
  }
  stats_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DetectStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 timeSeq = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timeseq_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_timeUnit;
        break;
      }
      
      // required uint32 timeUnit = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timeUnit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timeunit_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_stats;
        break;
      }
      
      // repeated .msg.IpDetect stats = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stats()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_stats;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DetectStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 timeSeq = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->timeseq(), output);
  }
  
  // required uint32 timeUnit = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->timeunit(), output);
  }
  
  // repeated .msg.IpDetect stats = 3;
  for (int i = 0; i < this->stats_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->stats(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DetectStats::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 timeSeq = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->timeseq(), target);
  }
  
  // required uint32 timeUnit = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->timeunit(), target);
  }
  
  // repeated .msg.IpDetect stats = 3;
  for (int i = 0; i < this->stats_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->stats(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DetectStats::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 timeSeq = 1;
    if (has_timeseq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timeseq());
    }
    
    // required uint32 timeUnit = 2;
    if (has_timeunit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timeunit());
    }
    
  }
  // repeated .msg.IpDetect stats = 3;
  total_size += 1 * this->stats_size();
  for (int i = 0; i < this->stats_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stats(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DetectStats::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DetectStats* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DetectStats*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DetectStats::MergeFrom(const DetectStats& from) {
  GOOGLE_CHECK_NE(&from, this);
  stats_.MergeFrom(from.stats_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_timeseq(from.timeseq());
    }
    if (from._has_bit(1)) {
      set_timeunit(from.timeunit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DetectStats::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DetectStats::CopyFrom(const DetectStats& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetectStats::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  for (int i = 0; i < stats_size(); i++) {
    if (!this->stats(i).IsInitialized()) return false;
  }
  return true;
}

void DetectStats::Swap(DetectStats* other) {
  if (other != this) {
    std::swap(timeseq_, other->timeseq_);
    std::swap(timeunit_, other->timeunit_);
    stats_.Swap(&other->stats_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DetectStats::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DetectStats_descriptor_;
  metadata.reflection = DetectStats_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CleanStats::kTimeSeqFieldNumber;
const int CleanStats::kTimeUnitFieldNumber;
const int CleanStats::kStatsFieldNumber;
#endif  // !_MSC_VER

CleanStats::CleanStats()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CleanStats::InitAsDefaultInstance() {
}

CleanStats::CleanStats(const CleanStats& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CleanStats::SharedCtor() {
  _cached_size_ = 0;
  timeseq_ = GOOGLE_ULONGLONG(0);
  timeunit_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CleanStats::~CleanStats() {
  SharedDtor();
}

void CleanStats::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CleanStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CleanStats::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CleanStats_descriptor_;
}

const CleanStats& CleanStats::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

CleanStats* CleanStats::default_instance_ = NULL;

CleanStats* CleanStats::New() const {
  return new CleanStats;
}

void CleanStats::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    timeseq_ = GOOGLE_ULONGLONG(0);
    timeunit_ = 0u;
  }
  stats_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CleanStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 timeSeq = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timeseq_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_timeUnit;
        break;
      }
      
      // required uint32 timeUnit = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timeUnit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timeunit_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_stats;
        break;
      }
      
      // repeated .msg.IpClean stats = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stats()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_stats;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CleanStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 timeSeq = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->timeseq(), output);
  }
  
  // required uint32 timeUnit = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->timeunit(), output);
  }
  
  // repeated .msg.IpClean stats = 3;
  for (int i = 0; i < this->stats_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->stats(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CleanStats::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 timeSeq = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->timeseq(), target);
  }
  
  // required uint32 timeUnit = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->timeunit(), target);
  }
  
  // repeated .msg.IpClean stats = 3;
  for (int i = 0; i < this->stats_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->stats(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CleanStats::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 timeSeq = 1;
    if (has_timeseq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timeseq());
    }
    
    // required uint32 timeUnit = 2;
    if (has_timeunit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timeunit());
    }
    
  }
  // repeated .msg.IpClean stats = 3;
  total_size += 1 * this->stats_size();
  for (int i = 0; i < this->stats_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stats(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CleanStats::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CleanStats* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CleanStats*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CleanStats::MergeFrom(const CleanStats& from) {
  GOOGLE_CHECK_NE(&from, this);
  stats_.MergeFrom(from.stats_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_timeseq(from.timeseq());
    }
    if (from._has_bit(1)) {
      set_timeunit(from.timeunit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CleanStats::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CleanStats::CopyFrom(const CleanStats& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CleanStats::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  for (int i = 0; i < stats_size(); i++) {
    if (!this->stats(i).IsInitialized()) return false;
  }
  return true;
}

void CleanStats::Swap(CleanStats* other) {
  if (other != this) {
    std::swap(timeseq_, other->timeseq_);
    std::swap(timeunit_, other->timeunit_);
    stats_.Swap(&other->stats_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CleanStats::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CleanStats_descriptor_;
  metadata.reflection = CleanStats_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CCStat::kDstIpFieldNumber;
const int CCStat::kSrcIpFieldNumber;
const int CCStat::kHttpReqsFieldNumber;
const int CCStat::kHttpConnsFieldNumber;
#endif  // !_MSC_VER

CCStat::CCStat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCStat::InitAsDefaultInstance() {
}

CCStat::CCStat(const CCStat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCStat::SharedCtor() {
  _cached_size_ = 0;
  dstip_ = 0u;
  srcip_ = 0u;
  httpreqs_ = GOOGLE_ULONGLONG(0);
  httpconns_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCStat::~CCStat() {
  SharedDtor();
}

void CCStat::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CCStat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCStat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCStat_descriptor_;
}

const CCStat& CCStat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

CCStat* CCStat::default_instance_ = NULL;

CCStat* CCStat::New() const {
  return new CCStat;
}

void CCStat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dstip_ = 0u;
    srcip_ = 0u;
    httpreqs_ = GOOGLE_ULONGLONG(0);
    httpconns_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCStat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 dstIp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dstip_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_srcIp;
        break;
      }
      
      // required uint32 srcIp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_srcIp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &srcip_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_httpReqs;
        break;
      }
      
      // required uint64 httpReqs = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_httpReqs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &httpreqs_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_httpConns;
        break;
      }
      
      // required uint64 httpConns = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_httpConns:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &httpconns_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCStat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 dstIp = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dstip(), output);
  }
  
  // required uint32 srcIp = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->srcip(), output);
  }
  
  // required uint64 httpReqs = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->httpreqs(), output);
  }
  
  // required uint64 httpConns = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->httpconns(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCStat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 dstIp = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dstip(), target);
  }
  
  // required uint32 srcIp = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->srcip(), target);
  }
  
  // required uint64 httpReqs = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->httpreqs(), target);
  }
  
  // required uint64 httpConns = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->httpconns(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCStat::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 dstIp = 1;
    if (has_dstip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dstip());
    }
    
    // required uint32 srcIp = 2;
    if (has_srcip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->srcip());
    }
    
    // required uint64 httpReqs = 3;
    if (has_httpreqs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->httpreqs());
    }
    
    // required uint64 httpConns = 4;
    if (has_httpconns()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->httpconns());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCStat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCStat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCStat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCStat::MergeFrom(const CCStat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_dstip(from.dstip());
    }
    if (from._has_bit(1)) {
      set_srcip(from.srcip());
    }
    if (from._has_bit(2)) {
      set_httpreqs(from.httpreqs());
    }
    if (from._has_bit(3)) {
      set_httpconns(from.httpconns());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCStat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCStat::CopyFrom(const CCStat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCStat::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void CCStat::Swap(CCStat* other) {
  if (other != this) {
    std::swap(dstip_, other->dstip_);
    std::swap(srcip_, other->srcip_);
    std::swap(httpreqs_, other->httpreqs_);
    std::swap(httpconns_, other->httpconns_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCStat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCStat_descriptor_;
  metadata.reflection = CCStat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CCStats::kTimeSeqFieldNumber;
const int CCStats::kTimeUnitFieldNumber;
const int CCStats::kStatsFieldNumber;
#endif  // !_MSC_VER

CCStats::CCStats()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCStats::InitAsDefaultInstance() {
}

CCStats::CCStats(const CCStats& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCStats::SharedCtor() {
  _cached_size_ = 0;
  timeseq_ = GOOGLE_ULONGLONG(0);
  timeunit_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCStats::~CCStats() {
  SharedDtor();
}

void CCStats::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CCStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCStats::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCStats_descriptor_;
}

const CCStats& CCStats::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

CCStats* CCStats::default_instance_ = NULL;

CCStats* CCStats::New() const {
  return new CCStats;
}

void CCStats::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    timeseq_ = GOOGLE_ULONGLONG(0);
    timeunit_ = 0u;
  }
  stats_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 timeSeq = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timeseq_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_timeUnit;
        break;
      }
      
      // required uint32 timeUnit = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timeUnit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timeunit_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_stats;
        break;
      }
      
      // repeated .msg.CCStat stats = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stats()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_stats;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 timeSeq = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->timeseq(), output);
  }
  
  // required uint32 timeUnit = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->timeunit(), output);
  }
  
  // repeated .msg.CCStat stats = 3;
  for (int i = 0; i < this->stats_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->stats(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCStats::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 timeSeq = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->timeseq(), target);
  }
  
  // required uint32 timeUnit = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->timeunit(), target);
  }
  
  // repeated .msg.CCStat stats = 3;
  for (int i = 0; i < this->stats_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->stats(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCStats::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 timeSeq = 1;
    if (has_timeseq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timeseq());
    }
    
    // required uint32 timeUnit = 2;
    if (has_timeunit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timeunit());
    }
    
  }
  // repeated .msg.CCStat stats = 3;
  total_size += 1 * this->stats_size();
  for (int i = 0; i < this->stats_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stats(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCStats::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCStats* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCStats*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCStats::MergeFrom(const CCStats& from) {
  GOOGLE_CHECK_NE(&from, this);
  stats_.MergeFrom(from.stats_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_timeseq(from.timeseq());
    }
    if (from._has_bit(1)) {
      set_timeunit(from.timeunit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCStats::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCStats::CopyFrom(const CCStats& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCStats::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  for (int i = 0; i < stats_size(); i++) {
    if (!this->stats(i).IsInitialized()) return false;
  }
  return true;
}

void CCStats::Swap(CCStats* other) {
  if (other != this) {
    std::swap(timeseq_, other->timeseq_);
    std::swap(timeunit_, other->timeunit_);
    stats_.Swap(&other->stats_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCStats::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCStats_descriptor_;
  metadata.reflection = CCStats_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActionL4::kIpFieldNumber;
const int ActionL4::kExpireFieldNumber;
#endif  // !_MSC_VER

ActionL4::ActionL4()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ActionL4::InitAsDefaultInstance() {
}

ActionL4::ActionL4(const ActionL4& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ActionL4::SharedCtor() {
  _cached_size_ = 0;
  ip_ = 0u;
  expire_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActionL4::~ActionL4() {
  SharedDtor();
}

void ActionL4::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActionL4::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActionL4::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActionL4_descriptor_;
}

const ActionL4& ActionL4::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

ActionL4* ActionL4::default_instance_ = NULL;

ActionL4* ActionL4::New() const {
  return new ActionL4;
}

void ActionL4::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ip_ = 0u;
    expire_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActionL4::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ip = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ip_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_expire;
        break;
      }
      
      // required uint32 expire = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_expire:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &expire_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ActionL4::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 ip = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ip(), output);
  }
  
  // required uint32 expire = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->expire(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ActionL4::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 ip = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ip(), target);
  }
  
  // required uint32 expire = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->expire(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ActionL4::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ip = 1;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ip());
    }
    
    // required uint32 expire = 2;
    if (has_expire()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->expire());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActionL4::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActionL4* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActionL4*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActionL4::MergeFrom(const ActionL4& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_ip(from.ip());
    }
    if (from._has_bit(1)) {
      set_expire(from.expire());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActionL4::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActionL4::CopyFrom(const ActionL4& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionL4::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void ActionL4::Swap(ActionL4* other) {
  if (other != this) {
    std::swap(ip_, other->ip_);
    std::swap(expire_, other->expire_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActionL4::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActionL4_descriptor_;
  metadata.reflection = ActionL4_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActionL7::kIpFieldNumber;
const int ActionL7::kExpireFieldNumber;
#endif  // !_MSC_VER

ActionL7::ActionL7()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ActionL7::InitAsDefaultInstance() {
}

ActionL7::ActionL7(const ActionL7& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ActionL7::SharedCtor() {
  _cached_size_ = 0;
  ip_ = 0u;
  expire_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActionL7::~ActionL7() {
  SharedDtor();
}

void ActionL7::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActionL7::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActionL7::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActionL7_descriptor_;
}

const ActionL7& ActionL7::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

ActionL7* ActionL7::default_instance_ = NULL;

ActionL7* ActionL7::New() const {
  return new ActionL7;
}

void ActionL7::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ip_ = 0u;
    expire_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActionL7::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ip = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ip_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_expire;
        break;
      }
      
      // required uint32 expire = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_expire:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &expire_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ActionL7::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 ip = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ip(), output);
  }
  
  // required uint32 expire = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->expire(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ActionL7::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 ip = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ip(), target);
  }
  
  // required uint32 expire = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->expire(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ActionL7::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ip = 1;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ip());
    }
    
    // required uint32 expire = 2;
    if (has_expire()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->expire());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActionL7::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActionL7* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActionL7*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActionL7::MergeFrom(const ActionL7& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_ip(from.ip());
    }
    if (from._has_bit(1)) {
      set_expire(from.expire());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActionL7::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActionL7::CopyFrom(const ActionL7& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionL7::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void ActionL7::Swap(ActionL7* other) {
  if (other != this) {
    std::swap(ip_, other->ip_);
    std::swap(expire_, other->expire_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActionL7::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActionL7_descriptor_;
  metadata.reflection = ActionL7_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActionBlackholeL4::kIpFieldNumber;
const int ActionBlackholeL4::kExpireFieldNumber;
#endif  // !_MSC_VER

ActionBlackholeL4::ActionBlackholeL4()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ActionBlackholeL4::InitAsDefaultInstance() {
}

ActionBlackholeL4::ActionBlackholeL4(const ActionBlackholeL4& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ActionBlackholeL4::SharedCtor() {
  _cached_size_ = 0;
  ip_ = 0u;
  expire_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActionBlackholeL4::~ActionBlackholeL4() {
  SharedDtor();
}

void ActionBlackholeL4::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActionBlackholeL4::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActionBlackholeL4::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActionBlackholeL4_descriptor_;
}

const ActionBlackholeL4& ActionBlackholeL4::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

ActionBlackholeL4* ActionBlackholeL4::default_instance_ = NULL;

ActionBlackholeL4* ActionBlackholeL4::New() const {
  return new ActionBlackholeL4;
}

void ActionBlackholeL4::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ip_ = 0u;
    expire_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActionBlackholeL4::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ip = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ip_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_expire;
        break;
      }
      
      // required uint32 expire = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_expire:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &expire_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ActionBlackholeL4::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 ip = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ip(), output);
  }
  
  // required uint32 expire = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->expire(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ActionBlackholeL4::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 ip = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ip(), target);
  }
  
  // required uint32 expire = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->expire(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ActionBlackholeL4::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ip = 1;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ip());
    }
    
    // required uint32 expire = 2;
    if (has_expire()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->expire());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActionBlackholeL4::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActionBlackholeL4* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActionBlackholeL4*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActionBlackholeL4::MergeFrom(const ActionBlackholeL4& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_ip(from.ip());
    }
    if (from._has_bit(1)) {
      set_expire(from.expire());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActionBlackholeL4::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActionBlackholeL4::CopyFrom(const ActionBlackholeL4& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionBlackholeL4::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void ActionBlackholeL4::Swap(ActionBlackholeL4* other) {
  if (other != this) {
    std::swap(ip_, other->ip_);
    std::swap(expire_, other->expire_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActionBlackholeL4::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActionBlackholeL4_descriptor_;
  metadata.reflection = ActionBlackholeL4_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActionBlackholeL7::kDstIpFieldNumber;
const int ActionBlackholeL7::kSrcIpFieldNumber;
const int ActionBlackholeL7::kExpireFieldNumber;
#endif  // !_MSC_VER

ActionBlackholeL7::ActionBlackholeL7()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ActionBlackholeL7::InitAsDefaultInstance() {
}

ActionBlackholeL7::ActionBlackholeL7(const ActionBlackholeL7& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ActionBlackholeL7::SharedCtor() {
  _cached_size_ = 0;
  dstip_ = 0u;
  srcip_ = 0u;
  expire_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActionBlackholeL7::~ActionBlackholeL7() {
  SharedDtor();
}

void ActionBlackholeL7::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActionBlackholeL7::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActionBlackholeL7::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActionBlackholeL7_descriptor_;
}

const ActionBlackholeL7& ActionBlackholeL7::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

ActionBlackholeL7* ActionBlackholeL7::default_instance_ = NULL;

ActionBlackholeL7* ActionBlackholeL7::New() const {
  return new ActionBlackholeL7;
}

void ActionBlackholeL7::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dstip_ = 0u;
    srcip_ = 0u;
    expire_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActionBlackholeL7::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 dstIp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dstip_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_srcIp;
        break;
      }
      
      // required uint32 srcIp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_srcIp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &srcip_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_expire;
        break;
      }
      
      // required uint32 expire = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_expire:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &expire_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ActionBlackholeL7::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 dstIp = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dstip(), output);
  }
  
  // required uint32 srcIp = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->srcip(), output);
  }
  
  // required uint32 expire = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->expire(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ActionBlackholeL7::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 dstIp = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dstip(), target);
  }
  
  // required uint32 srcIp = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->srcip(), target);
  }
  
  // required uint32 expire = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->expire(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ActionBlackholeL7::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 dstIp = 1;
    if (has_dstip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dstip());
    }
    
    // required uint32 srcIp = 2;
    if (has_srcip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->srcip());
    }
    
    // required uint32 expire = 3;
    if (has_expire()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->expire());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActionBlackholeL7::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActionBlackholeL7* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActionBlackholeL7*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActionBlackholeL7::MergeFrom(const ActionBlackholeL7& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_dstip(from.dstip());
    }
    if (from._has_bit(1)) {
      set_srcip(from.srcip());
    }
    if (from._has_bit(2)) {
      set_expire(from.expire());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActionBlackholeL7::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActionBlackholeL7::CopyFrom(const ActionBlackholeL7& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionBlackholeL7::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void ActionBlackholeL7::Swap(ActionBlackholeL7* other) {
  if (other != this) {
    std::swap(dstip_, other->dstip_);
    std::swap(srcip_, other->srcip_);
    std::swap(expire_, other->expire_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActionBlackholeL7::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActionBlackholeL7_descriptor_;
  metadata.reflection = ActionBlackholeL7_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Actions::kActionL4SFieldNumber;
const int Actions::kActionL7SFieldNumber;
const int Actions::kActionBhL4SFieldNumber;
const int Actions::kActionBhL7SFieldNumber;
#endif  // !_MSC_VER

Actions::Actions()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Actions::InitAsDefaultInstance() {
}

Actions::Actions(const Actions& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Actions::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Actions::~Actions() {
  SharedDtor();
}

void Actions::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Actions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Actions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Actions_descriptor_;
}

const Actions& Actions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

Actions* Actions::default_instance_ = NULL;

Actions* Actions::New() const {
  return new Actions;
}

void Actions::Clear() {
  actionl4s_.Clear();
  actionl7s_.Clear();
  actionbhl4s_.Clear();
  actionbhl7s_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Actions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .msg.ActionL4 actionL4s = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_actionL4s:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_actionl4s()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_actionL4s;
        if (input->ExpectTag(18)) goto parse_actionL7s;
        break;
      }
      
      // repeated .msg.ActionL7 actionL7s = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_actionL7s:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_actionl7s()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_actionL7s;
        if (input->ExpectTag(26)) goto parse_actionBhL4s;
        break;
      }
      
      // repeated .msg.ActionBlackholeL4 actionBhL4s = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_actionBhL4s:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_actionbhl4s()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_actionBhL4s;
        if (input->ExpectTag(34)) goto parse_actionBhL7s;
        break;
      }
      
      // repeated .msg.ActionBlackholeL7 actionBhL7s = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_actionBhL7s:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_actionbhl7s()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_actionBhL7s;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Actions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .msg.ActionL4 actionL4s = 1;
  for (int i = 0; i < this->actionl4s_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->actionl4s(i), output);
  }
  
  // repeated .msg.ActionL7 actionL7s = 2;
  for (int i = 0; i < this->actionl7s_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->actionl7s(i), output);
  }
  
  // repeated .msg.ActionBlackholeL4 actionBhL4s = 3;
  for (int i = 0; i < this->actionbhl4s_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->actionbhl4s(i), output);
  }
  
  // repeated .msg.ActionBlackholeL7 actionBhL7s = 4;
  for (int i = 0; i < this->actionbhl7s_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->actionbhl7s(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Actions::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .msg.ActionL4 actionL4s = 1;
  for (int i = 0; i < this->actionl4s_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->actionl4s(i), target);
  }
  
  // repeated .msg.ActionL7 actionL7s = 2;
  for (int i = 0; i < this->actionl7s_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->actionl7s(i), target);
  }
  
  // repeated .msg.ActionBlackholeL4 actionBhL4s = 3;
  for (int i = 0; i < this->actionbhl4s_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->actionbhl4s(i), target);
  }
  
  // repeated .msg.ActionBlackholeL7 actionBhL7s = 4;
  for (int i = 0; i < this->actionbhl7s_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->actionbhl7s(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Actions::ByteSize() const {
  int total_size = 0;
  
  // repeated .msg.ActionL4 actionL4s = 1;
  total_size += 1 * this->actionl4s_size();
  for (int i = 0; i < this->actionl4s_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->actionl4s(i));
  }
  
  // repeated .msg.ActionL7 actionL7s = 2;
  total_size += 1 * this->actionl7s_size();
  for (int i = 0; i < this->actionl7s_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->actionl7s(i));
  }
  
  // repeated .msg.ActionBlackholeL4 actionBhL4s = 3;
  total_size += 1 * this->actionbhl4s_size();
  for (int i = 0; i < this->actionbhl4s_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->actionbhl4s(i));
  }
  
  // repeated .msg.ActionBlackholeL7 actionBhL7s = 4;
  total_size += 1 * this->actionbhl7s_size();
  for (int i = 0; i < this->actionbhl7s_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->actionbhl7s(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Actions::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Actions* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Actions*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Actions::MergeFrom(const Actions& from) {
  GOOGLE_CHECK_NE(&from, this);
  actionl4s_.MergeFrom(from.actionl4s_);
  actionl7s_.MergeFrom(from.actionl7s_);
  actionbhl4s_.MergeFrom(from.actionbhl4s_);
  actionbhl7s_.MergeFrom(from.actionbhl7s_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Actions::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Actions::CopyFrom(const Actions& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Actions::IsInitialized() const {
  
  for (int i = 0; i < actionl4s_size(); i++) {
    if (!this->actionl4s(i).IsInitialized()) return false;
  }
  for (int i = 0; i < actionl7s_size(); i++) {
    if (!this->actionl7s(i).IsInitialized()) return false;
  }
  for (int i = 0; i < actionbhl4s_size(); i++) {
    if (!this->actionbhl4s(i).IsInitialized()) return false;
  }
  for (int i = 0; i < actionbhl7s_size(); i++) {
    if (!this->actionbhl7s(i).IsInitialized()) return false;
  }
  return true;
}

void Actions::Swap(Actions* other) {
  if (other != this) {
    actionl4s_.Swap(&other->actionl4s_);
    actionl7s_.Swap(&other->actionl7s_);
    actionbhl4s_.Swap(&other->actionbhl4s_);
    actionbhl7s_.Swap(&other->actionbhl7s_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Actions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Actions_descriptor_;
  metadata.reflection = Actions_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

IpsReq::IpsReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void IpsReq::InitAsDefaultInstance() {
}

IpsReq::IpsReq(const IpsReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void IpsReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IpsReq::~IpsReq() {
  SharedDtor();
}

void IpsReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IpsReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IpsReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IpsReq_descriptor_;
}

const IpsReq& IpsReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

IpsReq* IpsReq::default_instance_ = NULL;

IpsReq* IpsReq::New() const {
  return new IpsReq;
}

void IpsReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IpsReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void IpsReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* IpsReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int IpsReq::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IpsReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IpsReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IpsReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IpsReq::MergeFrom(const IpsReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IpsReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IpsReq::CopyFrom(const IpsReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IpsReq::IsInitialized() const {
  
  return true;
}

void IpsReq::Swap(IpsReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IpsReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IpsReq_descriptor_;
  metadata.reflection = IpsReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IpConf::kIpFieldNumber;
const int IpConf::kL7EFieldNumber;
#endif  // !_MSC_VER

IpConf::IpConf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void IpConf::InitAsDefaultInstance() {
}

IpConf::IpConf(const IpConf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void IpConf::SharedCtor() {
  _cached_size_ = 0;
  ip_ = 0u;
  l7e_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IpConf::~IpConf() {
  SharedDtor();
}

void IpConf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IpConf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IpConf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IpConf_descriptor_;
}

const IpConf& IpConf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

IpConf* IpConf::default_instance_ = NULL;

IpConf* IpConf::New() const {
  return new IpConf;
}

void IpConf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ip_ = 0u;
    l7e_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IpConf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ip = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ip_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_l7E;
        break;
      }
      
      // required bool l7E = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_l7E:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &l7e_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void IpConf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 ip = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ip(), output);
  }
  
  // required bool l7E = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->l7e(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* IpConf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 ip = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ip(), target);
  }
  
  // required bool l7E = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->l7e(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int IpConf::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ip = 1;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ip());
    }
    
    // required bool l7E = 2;
    if (has_l7e()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IpConf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IpConf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IpConf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IpConf::MergeFrom(const IpConf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_ip(from.ip());
    }
    if (from._has_bit(1)) {
      set_l7e(from.l7e());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IpConf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IpConf::CopyFrom(const IpConf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IpConf::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void IpConf::Swap(IpConf* other) {
  if (other != this) {
    std::swap(ip_, other->ip_);
    std::swap(l7e_, other->l7e_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IpConf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IpConf_descriptor_;
  metadata.reflection = IpConf_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string IpsResp::_default_dcc_;
#ifndef _MSC_VER
const int IpsResp::kDccFieldNumber;
const int IpsResp::kIpsFieldNumber;
#endif  // !_MSC_VER

IpsResp::IpsResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void IpsResp::InitAsDefaultInstance() {
}

IpsResp::IpsResp(const IpsResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void IpsResp::SharedCtor() {
  _cached_size_ = 0;
  dcc_ = const_cast< ::std::string*>(&_default_dcc_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IpsResp::~IpsResp() {
  SharedDtor();
}

void IpsResp::SharedDtor() {
  if (dcc_ != &_default_dcc_) {
    delete dcc_;
  }
  if (this != default_instance_) {
  }
}

void IpsResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IpsResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IpsResp_descriptor_;
}

const IpsResp& IpsResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();  return *default_instance_;
}

IpsResp* IpsResp::default_instance_ = NULL;

IpsResp* IpsResp::New() const {
  return new IpsResp;
}

void IpsResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (dcc_ != &_default_dcc_) {
        dcc_->clear();
      }
    }
  }
  ips_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IpsResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string dcc = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dcc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dcc().data(), this->dcc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ips;
        break;
      }
      
      // repeated .msg.IpConf ips = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ips:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ips()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ips;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void IpsResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string dcc = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dcc().data(), this->dcc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->dcc(), output);
  }
  
  // repeated .msg.IpConf ips = 2;
  for (int i = 0; i < this->ips_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->ips(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* IpsResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string dcc = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dcc().data(), this->dcc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->dcc(), target);
  }
  
  // repeated .msg.IpConf ips = 2;
  for (int i = 0; i < this->ips_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->ips(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int IpsResp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string dcc = 1;
    if (has_dcc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dcc());
    }
    
  }
  // repeated .msg.IpConf ips = 2;
  total_size += 1 * this->ips_size();
  for (int i = 0; i < this->ips_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ips(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IpsResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IpsResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IpsResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IpsResp::MergeFrom(const IpsResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  ips_.MergeFrom(from.ips_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_dcc(from.dcc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IpsResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IpsResp::CopyFrom(const IpsResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IpsResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < ips_size(); i++) {
    if (!this->ips(i).IsInitialized()) return false;
  }
  return true;
}

void IpsResp::Swap(IpsResp* other) {
  if (other != this) {
    std::swap(dcc_, other->dcc_);
    ips_.Swap(&other->ips_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IpsResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IpsResp_descriptor_;
  metadata.reflection = IpsResp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace msg

// @@protoc_insertion_point(global_scope)
